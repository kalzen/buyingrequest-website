import{a as r,t as m}from"./app-D4aBqzlN.js";import{u as v}from"./index-Ck002eg7.js";var R=m[" useInsertionEffect ".trim().toString()]||v;function b({prop:t,defaultProp:s,onChange:e=()=>{},caller:f}){const[u,c,i]=C({defaultProp:s,onChange:e}),o=t!==void 0,a=o?t:u;{const n=r.useRef(t!==void 0);r.useEffect(()=>{const l=n.current;l!==o&&console.warn(`${f} is changing from ${l?"controlled":"uncontrolled"} to ${o?"controlled":"uncontrolled"}. Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component.`),n.current=o},[o,f])}const d=r.useCallback(n=>{if(o){const l=E(n)?n(t):n;l!==t&&i.current?.(l)}else c(n)},[o,t,c,i]);return[a,d]}function C({defaultProp:t,onChange:s}){const[e,f]=r.useState(t),u=r.useRef(e),c=r.useRef(s);return R(()=>{c.current=s},[s]),r.useEffect(()=>{u.current!==e&&(c.current?.(e),u.current=e)},[e,u]),[e,f,c]}function E(t){return typeof t=="function"}export{b as u};
